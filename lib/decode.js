// Generated by CoffeeScript 2.3.2
(function() {

  /*
   compare primitive array
  */
  /*
   decode midi-in (DAW -> KK) message
  */
  /*
   decode midi-out (KK -> DAW) message
  */
  /*
   decode 7bit value
  */
  /*
   parse control change message
  */
  /*
   parse sysex message
  */
  var MIDI_IN_CCs, MIDI_IN_CH, MIDI_OUT_CCs, MIDI_OUT_CH, SYSEX_DEVICE_ID, SYSEX_HEADER, SYSEX_MESSAGEs, bytesEquals, decodeDownStream, decodeUpStream, decodeValue, parseCC, parseSysEx;

  ({MIDI_IN_CH, MIDI_IN_CCs, MIDI_OUT_CH, MIDI_OUT_CCs, SYSEX_DEVICE_ID, SYSEX_HEADER, SYSEX_MESSAGEs} = require('./midi-implementation'));

  decodeDownStream = function(midiMessage) {
    var msg;
    msg = (function() {
      switch (false) {
        case midiMessage.type !== 'SysEx':
          return parseSysEx(midiMessage);
        case !(midiMessage.channel === MIDI_IN_CH && midiMessage.type === 'ControlChange'):
          return parseCC(midiMessage, MIDI_IN_CCs);
      }
    })();
    return msg || {
      id: 'Unknown',
      midiMessage: midiMessage
    };
  };

  decodeUpStream = function(midiMessage) {
    var msg;
    msg = midiMessage.channel === MIDI_OUT_CH && midiMessage.type === 'ControlChange' ? parseCC(midiMessage, MIDI_OUT_CCs) : void 0;
    return msg || {
      id: 'Unknown',
      midiMessage: midiMessage
    };
  };

  parseSysEx = function(midiMessage) {
    var data, def, index, result, str, value;
    if (!((bytesEquals(SYSEX_DEVICE_ID, midiMessage.deviceId)) && (bytesEquals(SYSEX_HEADER, midiMessage.data)))) {
      return;
    }
    data = midiMessage.data.slice(SYSEX_HEADER.length);
    def = SYSEX_MESSAGEs[data[0]];
    if (!def) {
      return;
    }
    value = data[1];
    index = data[2];
    result = {
      id: def.id
    };
    // has index?
    if (def.hasIndex) {
      result.index = index;
    } else {
      if (index !== 0) {
        throw new Error(`Maybe wrong definition. index isn't 0. id:${def.id} index:${index}`);
      }
    }
    // has value?
    if (!(typeof def.encoding === 'string' && def.encoding.startsWith('Fixed'))) {
      result.value = decodeValue(value, def.encoding);
    } else {
      if (value !== 0) {
        throw new Error(`Maybe wrong definition. value isn't 0. id:${def.id} value:${value}`);
      }
    }
    // has String?
    if (def.hasString) {
      str = (Buffer.from(data.slice(3))).toString();
      if ('value' in result) {
        result.string = str;
      } else {
        result.value = str;
      }
    }
    return result;
  };

  parseCC = function(midiMessage, CCs) {
    var def, result, v;
    def = CCs[midiMessage.control];
    if (!def) {
      return;
    }
    result = {
      id: def.id
    };
    if (def.index !== void 0) {
      result.index = def.index;
    }
    v = decodeValue(midiMessage.value, def.encoding);
    if (typeof v !== 'undefined') {
      result.value = v;
    }
    return result;
  };

  decodeValue = function(v, enc) {
    switch (false) {
      case enc !== 'Bool1':
        if (v !== 0 && v !== 1) {
          throw new Error(`Wrong definition of encoding [${enc}]. value:${v}`);
        }
        return v !== 0;
      case enc !== 'Bool7':
        if (v !== 0 && v !== 127) {
          throw new Error(`Wrong definition of encoding [${enc}]. value:${v}`);
        }
        return v !== 0;
      case enc !== 'Int7':
        if (v & 0x40) {
          return v - 0x80;
        } else {
          return v;
        }
        break;
      case typeof enc !== 'object':
        if (!(v in enc)) {
          throw new Error(`Wrong definition of encoding [${enc}]. value:${v}`);
        }
        return enc[v];
      case enc !== 'UInt7':
        return v;
      case enc !== 'Fixed0':
        return void 0;
      case enc !== 'Fixed1':
        return void 0;
      default:
        throw new Error(`Unknown definition of encoding [${enc}].`);
    }
  };

  bytesEquals = function(expect, src, offset = 0) {
    return expect.every(function(b, i) {
      return src.length > i && b === src[i + offset];
    });
  };

  module.exports = {
    decodeUpStream: decodeUpStream,
    decodeDownStream: decodeDownStream
  };

}).call(this);
