// Generated by CoffeeScript 2.3.2
(function() {
  var DownStreamDecoder, DownStreamEncoder, Transform, UpStreamDecoder, UpStreamEncoder, decodeDownStream, decodeUpStream, encodeDownStream, encodeUpStream;

  ({Transform} = require('stream'));

  ({decodeDownStream, decodeUpStream} = require('./decode'));

  ({encodeDownStream, encodeUpStream} = require('./encode'));

  /*
   transform midi-message to komplete-kontrol message for down stream (DAW -> KK)
  */
  DownStreamDecoder = class DownStreamDecoder extends Transform {
    constructor(opts) {
      super({
        objectMode: true
      });
    }

    _transform(midiMessage, encoding, cb) {
      var error, kkMessage;
      try {
        kkMessage = decodeDownStream(midiMessage);
        this.push(kkMessage);
        return cb();
      } catch (error1) {
        error = error1;
        return cb(error);
      }
    }

  };

  /*
   transform midi-message to komplete-kontrol message for up stream (KK -> DAW)
  */
  UpStreamDecoder = class UpStreamDecoder extends Transform {
    constructor(opts) {
      super({
        objectMode: true
      });
    }

    _transform(midiMessage, encoding, cb) {
      var error, kkMessage;
      try {
        kkMessage = decodeUpStream(midiMessage);
        this.push(kkMessage);
        return cb();
      } catch (error1) {
        error = error1;
        return cb(error);
      }
    }

  };

  /*
   transform komplete-kontrol message to midi-message for down stream (DAW -> KK)
  */
  DownStreamEncoder = class DownStreamEncoder extends Transform {
    constructor(opts) {
      super({
        objectMode: true
      });
    }

    _transform(kkMessage, encoding, cb) {
      var error, midiMessage;
      try {
        midiMessage = encodeDownStream(kkMessage);
        this.push(midiMessage);
        return cb();
      } catch (error1) {
        error = error1;
        return cb(error);
      }
    }

  };

  /*
   transform komplete-kontrol message to midi-message for up stream (KK -> DAW)
  */
  UpStreamEncoder = class UpStreamEncoder extends Transform {
    constructor(opts) {
      super({
        objectMode: true
      });
    }

    _transform(kkMessage, encoding, cb) {
      var error, midiMessage;
      try {
        midiMessage = encodeUpStream(kkMessage);
        this.push(midiMessage);
        return cb();
      } catch (error1) {
        error = error1;
        return cb(error);
      }
    }

  };

  module.exports = {
    DownStreamDecoder: DownStreamDecoder,
    UpStreamDecoder: UpStreamDecoder,
    DownStreamEncoder: DownStreamEncoder,
    UpStreamEncoder: UpStreamEncoder
  };

}).call(this);
