// Generated by CoffeeScript 2.3.2
(function() {
  var midi;

  midi = require('midi');

  module.exports = {
    openVirtualMidi: function(inName, outName) {
      var input, output;
      if (outName == null) {
        outName = inName;
      }
      input = new midi.input();
      output = new midi.output();
      input.openVirtualPort(inName);
      // ignore sysex, timing, active sensing
      input.ignoreTypes(false, true, false);
      output.openVirtualPort(outName);
      return {
        in: midi.createReadStream(input),
        out: midi.createWriteStream(output)
      };
    },
    openMidi: function(inName, outName) {
      var input, inputIndex, output, outputIndex, ref, ref1;
      if (outName == null) {
        outName = inName;
      }
      input = new midi.input();
      output = new midi.output();
      inputIndex = (function() {
        var results = [];
        for (var j = 0, ref = input.getPortCount(); 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this).find(function(i) {
        return input.getPortName(i) === inName;
      });
      outputIndex = (function() {
        var results = [];
        for (var j = 0, ref1 = input.getPortCount(); 0 <= ref1 ? j < ref1 : j > ref1; 0 <= ref1 ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this).find(function(i) {
        return output.getPortName(i) === inName;
      });
      if (typeof inputIndex === 'undefined') {
        throw new Error(`Unfound MIDI input port. name:${inName}`);
      }
      if (typeof outputIndex === 'undefined') {
        throw new Error(`Unfound MIDI output port. name:${inName}`);
      }
      input.openPort(inputIndex);
      // ignore sysex, timing, active sensing
      input.ignoreTypes(false, true, false);
      output.openPort(outputIndex);
      return {
        in: midi.createReadStream(input),
        out: midi.createWriteStream(output)
      };
    }
  };

}).call(this);
